/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from '@payloadcms/db-postgres'
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  uuid,
  varchar,
  boolean,
  timestamp,
  numeric,
  serial,
  integer,
  jsonb,
} from '@payloadcms/db-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-postgres/drizzle'

export const users = pgTable(
  'users',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    name: varchar('name').notNull(),
    email: varchar('email').notNull(),
    emailVerified: boolean('email_verified').notNull().default(false),
    image: varchar('image'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    users_name_idx: index('users_name_idx').on(columns.name),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
  }),
)

export const user_sessions = pgTable(
  'user_sessions',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    userId: uuid('user_id_id')
      .notNull()
      .references(() => users.id, {
        onDelete: 'set null',
      }),
    token: varchar('token').notNull(),
    expiresAt: timestamp('expires_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    ipAddress: varchar('ip_address'),
    userAgent: varchar('user_agent'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    user_sessions_user_id_idx: index('user_sessions_user_id_idx').on(columns.userId),
    user_sessions_token_idx: uniqueIndex('user_sessions_token_idx').on(columns.token),
    user_sessions_ip_address_idx: index('user_sessions_ip_address_idx').on(columns.ipAddress),
    user_sessions_updated_at_idx: index('user_sessions_updated_at_idx').on(columns.updatedAt),
    user_sessions_created_at_idx: index('user_sessions_created_at_idx').on(columns.createdAt),
  }),
)

export const user_accounts = pgTable(
  'user_accounts',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    userId: uuid('user_id_id')
      .notNull()
      .references(() => users.id, {
        onDelete: 'set null',
      }),
    accountId: varchar('account_id').notNull(),
    providerId: varchar('provider_id').notNull(),
    accessToken: varchar('access_token'),
    refreshToken: varchar('refresh_token'),
    accessTokenExpiresAt: timestamp('access_token_expires_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    refreshTokenExpiresAt: timestamp('refresh_token_expires_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    scope: varchar('scope'),
    idToken: varchar('id_token'),
    password: varchar('password'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    user_accounts_user_id_idx: index('user_accounts_user_id_idx').on(columns.userId),
    user_accounts_provider_id_idx: index('user_accounts_provider_id_idx').on(columns.providerId),
    user_accounts_updated_at_idx: index('user_accounts_updated_at_idx').on(columns.updatedAt),
    user_accounts_created_at_idx: index('user_accounts_created_at_idx').on(columns.createdAt),
  }),
)

export const user_verifications = pgTable(
  'user_verifications',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    identifier: varchar('identifier').notNull(),
    value: varchar('value').notNull(),
    expiresAt: timestamp('expires_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    user_verifications_updated_at_idx: index('user_verifications_updated_at_idx').on(
      columns.updatedAt,
    ),
    user_verifications_created_at_idx: index('user_verifications_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const media = pgTable(
  'media',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    alt: varchar('alt').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: uuid('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: uuid('users_id'),
    'user-sessionsID': uuid('user_sessions_id'),
    'user-accountsID': uuid('user_accounts_id'),
    'user-verificationsID': uuid('user_verifications_id'),
    mediaID: uuid('media_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_user_sessions_id_idx: index(
      'payload_locked_documents_rels_user_sessions_id_idx',
    ).on(columns['user-sessionsID']),
    payload_locked_documents_rels_user_accounts_id_idx: index(
      'payload_locked_documents_rels_user_accounts_id_idx',
    ).on(columns['user-accountsID']),
    payload_locked_documents_rels_user_verifications_id_idx: index(
      'payload_locked_documents_rels_user_verifications_id_idx',
    ).on(columns['user-verificationsID']),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    'user-sessionsIdFk': foreignKey({
      columns: [columns['user-sessionsID']],
      foreignColumns: [user_sessions.id],
      name: 'payload_locked_documents_rels_user_sessions_fk',
    }).onDelete('cascade'),
    'user-accountsIdFk': foreignKey({
      columns: [columns['user-accountsID']],
      foreignColumns: [user_accounts.id],
      name: 'payload_locked_documents_rels_user_accounts_fk',
    }).onDelete('cascade'),
    'user-verificationsIdFk': foreignKey({
      columns: [columns['user-verificationsID']],
      foreignColumns: [user_verifications.id],
      name: 'payload_locked_documents_rels_user_verifications_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: uuid('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: uuid('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const relations_users = relations(users, () => ({}))
export const relations_user_sessions = relations(user_sessions, ({ one }) => ({
  userId: one(users, {
    fields: [user_sessions.userId],
    references: [users.id],
    relationName: 'userId',
  }),
}))
export const relations_user_accounts = relations(user_accounts, ({ one }) => ({
  userId: one(users, {
    fields: [user_accounts.userId],
    references: [users.id],
    relationName: 'userId',
  }),
}))
export const relations_user_verifications = relations(user_verifications, () => ({}))
export const relations_media = relations(media, () => ({}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    'user-sessionsID': one(user_sessions, {
      fields: [payload_locked_documents_rels['user-sessionsID']],
      references: [user_sessions.id],
      relationName: 'user-sessions',
    }),
    'user-accountsID': one(user_accounts, {
      fields: [payload_locked_documents_rels['user-accountsID']],
      references: [user_accounts.id],
      relationName: 'user-accounts',
    }),
    'user-verificationsID': one(user_verifications, {
      fields: [payload_locked_documents_rels['user-verificationsID']],
      references: [user_verifications.id],
      relationName: 'user-verifications',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))

type DatabaseSchema = {
  users: typeof users
  user_sessions: typeof user_sessions
  user_accounts: typeof user_accounts
  user_verifications: typeof user_verifications
  media: typeof media
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  relations_users: typeof relations_users
  relations_user_sessions: typeof relations_user_sessions
  relations_user_accounts: typeof relations_user_accounts
  relations_user_verifications: typeof relations_user_verifications
  relations_media: typeof relations_media
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
}

declare module '@payloadcms/db-postgres' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
